#!/usr/bin/env python2

"""
Copyright (c) 2015 Jonatan Nordentoft

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to
deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
"""

JOYSTICK_ID = 1


import pygame, subprocess, time
from pymouse import PyMouse
from pykeyboard import PyKeyboard

pygame.init()
pygame.joystick.init()

# Get the joystick
joy = pygame.joystick.Joystick(JOYSTICK_ID)
joy.init()

# Get the input devices (our output)
mouse = PyMouse()
keyboard = PyKeyboard()

clock = pygame.time.Clock()
FPS = 60


l3Prev       = False
r3Prev       = False
upPrev       = False
rightPrev    = False
downPrev     = False
leftPrev     = False
startPrev    = False
l2DPrev      = False
r2DPrev      = False
l1DPrev      = False
trianglePrev = False
circlePrev   = False
crossPrev    = False
squarePrev   = False
psPrev       = False

onboard = None
onboardVisible = False

while True:
    pygame.event.pump()

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()


    pos = mouse.position()
    posx, posy = pos


    x = joy.get_axis(0)
    y = joy.get_axis(1)

    x2 = joy.get_axis(2)
    y2 = joy.get_axis(3)

    l3       = joy.get_button(1)
    r3       = joy.get_button(2)
    start    = joy.get_button(3)
    up       = joy.get_button(4)
    right    = joy.get_button(5)
    down     = joy.get_button(6)
    left     = joy.get_button(7)
    l2D      = joy.get_button(8)
    r2D      = joy.get_button(9)
    l1D      = joy.get_button(10)
    triangle = joy.get_button(12)
    circle   = joy.get_button(13)
    cross    = joy.get_button(14)
    square   = joy.get_button(15)
    ps       = joy.get_button(16)

    # Move cursor
    mouseX, mouseY = pos
    mouseX += x * 15
    mouseY += y * 15
    mouse.move(mouseX, mouseY)

    # Scroll
    mouse.scroll(round(y2), round(x2))

    # Left click
    if l3 != l3Prev:
        if l3:
            mouse.press(posx, posy)
        else:
            mouse.release(posx, posy)
        l3Prev = l3

    # Right click
    if r3 != r3Prev:
        if r3:
            mouse.press(posx, posy, 2)
        else:
            mouse.release(posx, posy, 2)
        r3Prev = r3

    # Onboard keyboard
    if triangle != trianglePrev:
        if triangle:
            if onboard is None or not(onboard.poll() is None):
                onboard = subprocess.Popen(["onboard"])
                onboardVisible = True

            elif onboardVisible:
                subprocess.call(['dbus-send', '--type=method_call', '--dest=org.onboard.Onboard', '/org/onboard/Onboard/Keyboard', 'org.onboard.Onboard.Keyboard.Hide'])
                onboardVisible = False
            else:
                subprocess.call(['dbus-send', '--type=method_call', '--dest=org.onboard.Onboard', '/org/onboard/Onboard/Keyboard', 'org.onboard.Onboard.Keyboard.Show'])
                onboardVisible = True


        trianglePrev = triangle

    # Delete
    if square != squarePrev:
        if square:
            keyboard.press_key(keyboard.backspace_key)
        else:
            keyboard.release_key(keyboard.backspace_key)

        squarePrev = square

    # Expose windows
    if start != startPrev:
        if start:
            subprocess.call(['dbus-send', '--session', '--dest=org.pantheon.gala', '/org/pantheon/gala', '--print-reply', 'org.pantheon.gala.PerformAction', 'int32:6'])

        startPrev = start

    # Slingshot
    if ps != psPrev:
        if ps:
            subprocess.call(['dbus-send', '--session', '--dest=org.pantheon.gala', '/org/pantheon/gala', '--print-reply', 'org.pantheon.gala.PerformAction', 'int32:4'])

        psPrev = ps

    # Enter
    if r2D != r2DPrev:
        if r2D:
            keyboard.press_key(keyboard.return_key)
        else:
            keyboard.release_key(keyboard.return_key)

        r2DPrev = r2D

    # Up
    if up != upPrev:
        if up:
            keyboard.press_key(keyboard.up_key)
        else:
            keyboard.release_key(keyboard.up_key)

        upPrev = up

    # Right
    if right != rightPrev:
        if right:
            keyboard.press_key(keyboard.right_key)
        else:
            keyboard.release_key(keyboard.right_key)

        rightPrev = right

    # Down
    if down != downPrev:
        if down:
            keyboard.press_key(keyboard.down_key)
        else:
            keyboard.release_key(keyboard.down_key)

        downPrev = down

    # Left
    if left != leftPrev:
        if left:
            keyboard.press_key(keyboard.left_key)
        else:
            keyboard.release_key(keyboard.left_key)

        leftPrev = left

    # Ctrl
    if l1D != l1DPrev:
        if l1D:
            keyboard.press_key(keyboard.control_key)
        else:
            keyboard.release_key(keyboard.control_key)

        l1DPrev = l1D

    # Shift
    if l2D != l2DPrev:
        if l2D:
            keyboard.press_key(keyboard.shift_l_key)
        else:
            keyboard.release_key(keyboard.shift_l_key)

        l2DPrev = l2D



    

    clock.tick(FPS)
